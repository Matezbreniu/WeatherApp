{"version":3,"sources":["WeatherDisplay.js","WeatherDisplayer.js","CurrentWeather.js","DailyWeather.js","HourlyWeather.js","Weather.js","CityHint.js","HintsList.js","Finder.js","App.js","serviceWorker.js","index.js"],"names":["WeatherDisplay","props","name","value","symbol","WeatherDisplayer","className","src","weather","icon","alt","main","description","displayList","map","display","key","CurrentWeather","Date","dt","getDay","toLocaleDateString","temp","toFixed","feels_like","pressure","humidity","wind_speed","sunrise","toLocaleTimeString","sunset","DailyWeather","days","day","index","min","max","HourlyWeather","state","hour","onSliderChange","setState","this","toLocaleString","onChange","railStyle","height","handleStyle","marginTop","width","backgroundColor","border","trackStyle","background","Component","Weather","selectedCity","current","hourly","daily","CityHint","onClick","city","HintsList","citiesHints","Finder","htmlFor","id","type","xmlns","viewBox","d","App","cityName","handleChange","e","target","findCity","setWeather","a","cities","filter","length","getWeather","console","log","handleClick","selectedHint","textContent","toLowerCase","forEach","includes","push","fetch","coord","lat","lon","then","response","json","result","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b61c03cd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction WeatherDisplay(props) {\r\n  return (\r\n    <div>\r\n      <p>{props.name}</p>\r\n      <p>\r\n        {props.value}\r\n        {props.symbol}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\nexport default WeatherDisplay;\r\n","import React from 'react';\r\nimport WeatherDisplay from './WeatherDisplay';\r\nimport './WeatherDisplayer.css';\r\n\r\nfunction WeatherDisplayer(props) {\r\n  return (\r\n    <div className='weatherContainer'>\r\n      <img\r\n        src={`http://openweathermap.org/img/wn/${props.weather.weather[0].icon}@2x.png`}\r\n        alt={props.weather.weather[0].main}\r\n      />\r\n      <p className='weatherDescription'>\r\n        {props.weather.weather[0].description}\r\n      </p>\r\n      {props.displayList.map((display) => (\r\n        <WeatherDisplay\r\n          key={display.name}\r\n          name={display.name}\r\n          value={display.value}\r\n          symbol={display.symbol}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\nexport default WeatherDisplayer;\r\n","import React from 'react';\r\nimport WeatherDisplayer from './WeatherDisplayer';\r\n\r\nfunction CurrentWeather(props) {\r\n  const weather = props.weather;\r\n  const days = [\r\n    'Niedziela',\r\n    'Poniedziałek',\r\n    'Wtorek',\r\n    'Środa',\r\n    'Czwartek',\r\n    'Piątek',\r\n    'Sobota',\r\n  ];\r\n  return (\r\n    <div className='currentWeather'>\r\n      <h2>\r\n        {days[new Date(weather.dt * 1000).getDay()]},{' '}\r\n        {new Date(weather.dt * 1000).toLocaleDateString()}\r\n      </h2>\r\n      <WeatherDisplayer\r\n        weather={weather}\r\n        displayList={[\r\n          {\r\n            name: 'Temperatura',\r\n            value: weather.temp.toFixed(0),\r\n            symbol: '°C',\r\n          },\r\n          {\r\n            name: 'Odczuwalna',\r\n            value: weather.feels_like.toFixed(0),\r\n            symbol: '°C',\r\n          },\r\n          {name: 'Ciśnienie', value: weather.pressure, symbol: 'hPa'},\r\n          {name: 'Wilgotność', value: weather.humidity, symbol: '%'},\r\n          {\r\n            name: 'Wiatr',\r\n            value: (weather.wind_speed * 3.6).toFixed(),\r\n            symbol: 'km/h',\r\n          },\r\n          {\r\n            name: 'Wschód',\r\n            value: new Date(weather.sunrise * 1000).toLocaleTimeString(),\r\n          },\r\n          {\r\n            name: 'Zachód',\r\n            value: new Date(weather.sunset * 1000).toLocaleTimeString(),\r\n          },\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CurrentWeather;\r\n","import React from 'react';\r\nimport WeatherDisplayer from './WeatherDisplayer.js';\r\nimport './DailyWeather.css';\r\n\r\nfunction DailyWeather(props) {\r\n  const weather = props.weather;\r\n  const days = [\r\n    'Niedziela',\r\n    'Poniedziałek',\r\n    'Wtorek',\r\n    'Środa',\r\n    'Czwartek',\r\n    'Piątek',\r\n    'Sobota',\r\n  ];\r\n  return (\r\n    <div className='dailyWeather'>\r\n      <h2>Pogoda na najbliższy tydzień</h2>\r\n      {weather.map((day, index) => {\r\n        if (index === 0) return null;\r\n        return (\r\n          <div key={index} className='weatherForOneDayContainer'>\r\n            <h3>{days[new Date(day.dt * 1000).getDay()]}, </h3>\r\n            <h3>{new Date(day.dt * 1000).toLocaleDateString()}</h3>\r\n            <WeatherDisplayer\r\n              weather={day}\r\n              displayList={[\r\n                {\r\n                  name: 'Temp.',\r\n                  value: `${day.temp.min.toFixed(0)}°C - ${day.temp.max.toFixed(\r\n                    0\r\n                  )}`,\r\n                  symbol: '°C',\r\n                },\r\n\r\n                {name: 'Ciśn.', value: day.pressure, symbol: 'hPa'},\r\n                {name: 'Wilg.', value: day.humidity, symbol: '%'},\r\n                {\r\n                  name: 'Wiatr',\r\n                  value: (day.wind_speed * 3.6).toFixed(),\r\n                  symbol: 'km/h',\r\n                },\r\n              ]}\r\n            />\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DailyWeather;\r\n","import React, {Component} from 'react';\r\nimport Slider from 'rc-slider';\r\nimport WeatherDisplayer from './WeatherDisplayer';\r\nimport 'rc-slider/assets/index.css';\r\nimport './HourlyWeather.css';\r\n\r\nclass HourlyWeather extends Component {\r\n  state = {\r\n    hour: 0,\r\n  };\r\n\r\n  onSliderChange = (hour) => {\r\n    this.setState({\r\n      hour,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const weather = this.props.weather;\r\n    const hour = this.state.hour;\r\n    return (\r\n      <div className='hourlyWeather'>\r\n        <h2>Pogoda na najbliższe 24h</h2>\r\n        <WeatherDisplayer\r\n          weather={weather[hour]}\r\n          displayList={[\r\n            {\r\n              name: 'Temperatura',\r\n              value: weather[hour].temp.toFixed(0),\r\n              symbol: '°C',\r\n            },\r\n            {name: 'Ciśnienie', value: weather[hour].pressure, symbol: 'hPa'},\r\n            {name: 'Wilgotność', value: weather[hour].humidity, symbol: '%'},\r\n            {\r\n              name: 'Wiatr',\r\n              value: (weather[hour].wind_speed * 3.6).toFixed(),\r\n              symbol: 'km/h',\r\n            },\r\n          ]}\r\n        />\r\n        <div className='date'>\r\n          {new Date(weather[hour].dt * 1000).toLocaleString()}{' '}\r\n        </div>\r\n        <div className='slider'>\r\n          <Slider\r\n            min={0}\r\n            max={23}\r\n            value={this.state.hour}\r\n            onChange={this.onSliderChange}\r\n            railStyle={{\r\n              height: 3,\r\n            }}\r\n            handleStyle={{\r\n              marginTop: -14,\r\n              height: 28,\r\n              width: 28,\r\n              backgroundColor: '#7dacdb',\r\n              border: 0,\r\n            }}\r\n            trackStyle={{\r\n              background: 'none',\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default HourlyWeather;\r\n","import React from 'react';\r\nimport CurrentWeather from './CurrentWeather';\r\nimport DailyWeather from './DailyWeather';\r\nimport HourlyWeather from './HourlyWeather';\r\nimport './Weather.css';\r\n\r\nfunction Weather(props) {\r\n  return (\r\n    <div className='weather'>\r\n      <CurrentWeather\r\n        selectedCity={props.selectedCity}\r\n        weather={props.weather.current}\r\n      />\r\n      <HourlyWeather\r\n        selectedCity={props.selectedCity}\r\n        weather={props.weather.hourly}\r\n      />\r\n      <DailyWeather\r\n        selectedCity={props.selectedCity}\r\n        weather={props.weather.daily}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default Weather;\r\n","import React from 'react';\r\nimport './CityHint.css';\r\n\r\nfunction CityHint(props) {\r\n  return (\r\n    <div className='cityHint' onClick={props.onClick}>\r\n      {props.city}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CityHint;\r\n","import React from 'react';\r\nimport CityHint from './CityHint';\r\nimport './HintsList.css';\r\n\r\nfunction HintsList(props) {\r\n  return (\r\n    <div className='hintsList'>\r\n      <div className='bar'></div>\r\n      {props.citiesHints.map((city) => (\r\n        <CityHint key={city} city={city} onClick={props.onClick} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HintsList;\r\n","import React from 'react';\r\nimport HintsList from './HintsList';\r\nimport './Finder.css';\r\n\r\nfunction Finder(props) {\r\n  return (\r\n    <div className='finderContainer'>\r\n      <label htmlFor='cityName'>Wpisz nazwę miasta </label>\r\n      <div className='finder'>\r\n        <div className='searchBar'>\r\n          <input\r\n            id='cityName'\r\n            type='text'\r\n            onChange={props.onChange}\r\n            value={props.selectedCity}\r\n          />\r\n          <div className='search'>\r\n            <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'>\r\n              <path d='M508.9 478.7L360.1 330c28.2-34.8 45.2-79.1 45.2-127.3 0-111.7-90.9-202.7-202.7-202.7S0 90.9 0 202.7s90.9 202.7 202.7 202.7c48.2 0 92.5-17 127.3-45.2l148.7 148.7c4.2 4.2 10.9 4.2 15.1 0l15.1-15.1C513 489.6 513 482.9 508.9 478.7zM202.7 362.7c-88.2 0-160-71.8-160-160s71.8-160 160-160 160 71.8 160 160S290.9 362.7 202.7 362.7z' />\r\n            </svg>\r\n            <div className='searchBtn' onClick={props.onClick}></div>\r\n          </div>\r\n        </div>\r\n        <HintsList citiesHints={props.citiesHints} onClick={props.onClick} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Finder;\r\n","import React, {Component} from 'react';\nimport Weather from './Weather';\nimport cities from './city.list.json';\nimport Finder from './Finder';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    selectedCity: '',\n    citiesHints: [],\n    weather: {},\n    cityName: '',\n  };\n\n  handleChange = (e) => {\n    const selectedCity = e.target.value;\n    this.findCity(selectedCity);\n    this.setState({\n      selectedCity,\n    });\n  };\n\n  setWeather = async (cityName) => {\n    const city = cities.filter((city) => city.name === cityName);\n    if (city.length > 0) {\n      await this.getWeather(city);\n      console.log(city);\n      console.log(this.state.weather);\n      this.setState({\n        cityName: city[0].name,\n        citiesHints: [],\n      });\n    }\n  };\n\n  handleClick = (e) => {\n    const className = e.target.className;\n    if (className === 'searchBtn') {\n      this.setWeather(this.state.selectedCity);\n    }\n    if (className === 'cityHint') {\n      const selectedHint = e.target.textContent;\n      this.setWeather(selectedHint);\n      this.setState({\n        selectedCity: selectedHint,\n      });\n    }\n  };\n\n  findCity = (selectedCity) => {\n    let citiesHints = [];\n    const cityName = selectedCity.toLowerCase();\n    if (cityName.length >= 3) {\n      cities.forEach((city) => {\n        if (city.name.toLowerCase().includes(cityName)) {\n          if (citiesHints.length < 5) {\n            if (!citiesHints.includes(city.name)) {\n              citiesHints.push(city.name);\n            }\n          }\n        }\n      });\n    }\n\n    this.setState({\n      citiesHints,\n    });\n  };\n\n  getWeather = async (city) => {\n    await fetch(\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${city[0].coord.lat}&lon=${city[0].coord.lon}&exclude=minutely&units=metric&lang=pl&appid=7a9b50c5cbac9ec8425e09f765e26a68`\n    )\n      .then((response) => response.json())\n      .then((result) => {\n        this.setState({\n          weather: result,\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  render() {\n    return (\n      <div className='wrapper'>\n        <header>\n          <h1>Aplikacja pogodowa</h1>\n        </header>\n        <main>\n          <Finder\n            selectedCity={this.state.selectedCity}\n            onChange={this.handleChange}\n            onClick={this.handleClick}\n            citiesHints={this.state.citiesHints}\n          />\n          {this.state.weather.current && (\n            <Weather\n              weather={this.state.weather}\n              selectedCity={this.state.cityName}\n            />\n          )}\n        </main>\n        <footer className='footer'></footer>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}